{"version":3,"file":"oauth.service.js","sourceRoot":"","sources":["../../../src/service/oauth/oauth.service.ts"],"names":[],"mappings":";;;AAAA,yCAA0D;AAC1D,+CAAiD;AACjD,6CAAkH;AAElH,MAAM,UAAU,GAAuB,CAAC,QAAQ,EAAE,aAAa,EAAE,WAAW,EAAE,OAAO,EAAE,SAAS,EAAE,WAAW,CAAC,CAAC;AAE/G,MAAM,YAAY;IAEd,oBAAoB,CAAC,UAAwB;QACzC,OAAO,4BAAiB,CAAC,OAAO,CAAC;YAC7B,KAAK,EAAE,UAAU;SACpB,CAAC,CAAC;IACP,CAAC;IAED,gBAAgB,CAAC,YAA8B,EAAE,WAAwB;QACrE,OAAO,4BAAiB,CAAC,MAAM,CAAC,YAAY,EAAE,EAAC,WAAW,EAAC,CAAQ,CAAC;IACxE,CAAC;IAED,uBAAuB,CAAC,YAA0B,EAAE,WAAwB;QACxE,OAAO,4BAAiB,CAAC,OAAO,CAAC;YAC7B,KAAK,EAAE,YAAY;YACnB,WAAW;SACd,CAAC,CAAC;IACP,CAAC;IAED,KAAK,CAAC,sBAAsB,CAAC,YAAoB;QAC7C,MAAM,UAAU,GAAQ,MAAM,4BAAiB,CAAC,OAAO,CAAC;YACpD,KAAK,EAAE;gBACH,YAAY,EAAE;oBACV,CAAC,cAAE,CAAC,IAAI,CAAC,EAAE,YAAY;iBAC1B;aACJ;YACD,OAAO,EAAE,CAAC;oBACN,KAAK,EAAE,sBAAW;oBAClB,UAAU;iBACb,CAAC;SACL,CAAC,CAAC;QAEH,OAAO,UAAU,IAAI,UAAU,CAAC,IAAI,IAAI,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC;IACvE,CAAC;IAED,KAAK,CAAC,uBAAuB,CAAC,aAAqB;QAC/C,MAAM,UAAU,GAAQ,MAAM,4BAAiB,CAAC,OAAO,CAAC;YACpD,KAAK,EAAE;gBACH,aAAa,EAAE;oBACX,CAAC,cAAE,CAAC,IAAI,CAAC,EAAE,aAAa;iBAC3B;aACJ;YACD,OAAO,EAAE,CAAC;oBACN,KAAK,EAAE,sBAAW;oBAClB,UAAU;iBACb,CAAC;SACL,CAAC,CAAC;QAEH,OAAO,UAAU,IAAI,UAAU,CAAC,IAAI,IAAI,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC;IACvE,CAAC;IAED,KAAK,CAAC,SAAS,CAAC,KAAa;QACzB,MAAM,IAAI,GAA4B,MAAM,sBAAW,CAAC,OAAO,CAAC;YAC5D,KAAK,EAAE;gBACH,OAAO,EAAE;oBACL,CAAC,cAAE,CAAC,EAAE,CAAC,EAAE,0BAAc,CAAC,KAAK;iBAChC;aACJ;SACJ,CAAQ,CAAC;QAEV,OAAO,IAAI,IAAI,IAAI,CAAC,UAAU,CAAC;IACnC,CAAC;IACD,KAAK,CAAC,cAAc,CAAC,KAAa;QAC9B,MAAM,IAAI,GAA4B,MAAM,sBAAW,CAAC,OAAO,CAAC;YAC5D,KAAK,EAAE;gBACH,OAAO,EAAE;oBACL,CAAC,cAAE,CAAC,EAAE,CAAC,EAAE,0BAAc,CAAC,UAAU;iBACrC;aACJ;SACJ,CAAQ,CAAC;QAEV,OAAO,IAAI,IAAI,IAAI,CAAC,UAAU,CAAC;IACnC,CAAC;CACJ;AAEY,QAAA,YAAY,GAAG,IAAI,YAAY,EAAE,CAAC","sourcesContent":["import { Op, Transaction, WhereOptions } from 'sequelize';\nimport { UsersRolesEnum } from '../../constants';\nimport { IDBResponse, IOauthTokenModel, IUser, IUserModel, OauthTokenDBModel, UserDBModel } from '../../database';\n\nconst attributes: Array<keyof IUser> = ['userId', 'id_telegram', 'name_user', 'phone', 'role_id', 'type_user'];\n\nclass OAuthService {\n\n    getAuthTokenByParams(findObject: WhereOptions): Promise<any> {\n        return OauthTokenDBModel.findOne({\n            where: findObject\n        });\n    }\n\n    createOauthToken(createObject: IOauthTokenModel, transaction: Transaction): Promise<void> {\n        return OauthTokenDBModel.create(createObject, {transaction}) as any;\n    }\n\n    deleteOathTokenByParams(deleteObject: WhereOptions, transaction: Transaction) {\n        return OauthTokenDBModel.destroy({\n            where: deleteObject,\n            transaction\n        });\n    }\n\n    async getUserFromAccessToken(access_token: string): Promise<IUser> {\n        const dbResponse: any = await OauthTokenDBModel.findOne({\n            where: {\n                access_token: {\n                    [Op.like]: access_token\n                }\n            },\n            include: [{\n                model: UserDBModel,\n                attributes\n            }]\n        });\n\n        return dbResponse && dbResponse.user && dbResponse.user.dataValues;\n    }\n\n    async getUserFromRefreshToken(refresh_token: string): Promise<any> {\n        const dbResponse: any = await OauthTokenDBModel.findOne({\n            where: {\n                refresh_token: {\n                    [Op.like]: refresh_token\n                }\n            },\n            include: [{\n                model: UserDBModel,\n                attributes\n            }]\n        });\n\n        return dbResponse && dbResponse.user && dbResponse.user.dataValues;\n    }\n\n    async authAdmin(email: string): Promise<IUserModel> {\n        const user: IDBResponse<IUserModel> = await UserDBModel.findOne({\n            where: {\n                role_id: {\n                    [Op.eq]: UsersRolesEnum.ADMIN\n                }\n            }\n        }) as any;\n\n        return user && user.dataValues;\n    }\n    async authSuperAdmin(email: string): Promise<IUserModel> {\n        const user: IDBResponse<IUserModel> = await UserDBModel.findOne({\n            where: {\n                role_id: {\n                    [Op.eq]: UsersRolesEnum.SUPERADMIN\n                }\n            }\n        }) as any;\n\n        return user && user.dataValues;\n    }\n}\n\nexport const oauthService = new OAuthService();\n"]}